#!/bin/bash

modules=()

# First collect a list of modules from the current directory.
# A module is a directory with with a .git folder and a package.json.
# Also start with recently modified directories
for name in `ls -t`
do
  :

  # skip non directories
  if ! [ -d $name ]; then
    continue
  fi

  cd $name

  # skip non git repos
  if ! [ -d .git ]; then
    cd ..
    continue
  fi

  # skip non node modules
  if ! [ -f package.json ]; then
    cd ..
    continue
  fi

  modules+=($name)

  cd ..
done

notupdated=()

# Update the modules
for module in ${modules[@]}
do
  :

  cd $module

  printf "\e[1;36m# Updating %s\e[0m" "$module"

  branch_name="$(git symbolic-ref HEAD 2>/dev/null)" ||
  branch_name="(unnamed branch)"     # detached HEAD
  branch_name=${branch_name##refs/heads/}
  if [ ! "$branch_name" =  'master' ]; then
    printf "\e[1;33m branch ($branch_name) != master \e[0m"
  fi

  git diff --exit-code > /dev/null
  if [ $? -eq 1 ]; then
    printf "\e[1;31m has uncommited changes! \e[0m\n"
    notupdated+=($module)
    cd ..
    continue
  fi

  git fetch --quiet

  local_revision="$(git rev-parse HEAD)"
  remote_revision="$(git rev-parse origin/$branch_name)"
  if [ "$local_revision" = "$remote_revision" ]; then
    printf "\e[1;34m already up to date. \e[0m\n"
    cd ..
    continue
  fi

  printf "\e[1;35m updating... \e[0m\n"

  git --no-pager log --color --pretty=tformat:'%Cred%h%Creset %s %Cgreen(%cr) %C(bold blue)<%aN>%Creset' HEAD..origin/$branch_name

  echo "Merging $branch_name with origin/$branch_name ..."
  git merge --quiet origin/$branch_name

  if ! [[ $(git diff-index --name-only $local_revision) =~ "package.json" ]]; then
    printf "\e[1;32mUpdated! (no changes to package.json) \e[0m\n"
    cd ..
    continue
  fi

  echo "Updating npm dependencies ..."
  rm -rf node_modules
  npm install --silent > /dev/null
  npm prune --silent > /dev/null
  echo "Linking globally ..."
  npm link --silent > /dev/null

  # there might not be any dependencies
  if ! [ -d node_modules ]; then
    cd ..
    continue
  fi

  dependencies=`ls node_modules`

  if [ ${#dependencies[@]} != 0 ]; then
    echo "Linking to dependencies:"

    for dependency in ${dependencies[@]}
    do
      :
      if ! [[ " ${modules[@]} " =~ " ${dependency} " ]]; then
        continue;
      fi
      npm link  --silent $dependency > /dev/null
      echo " + $dependency"
    done
  fi

  printf "\e[1;32mUpdated! \e[0m\n"

  cd ..
done

# Warn about modules that were not updated
if [ ${#notupdated[@]} != 0 ]
then
  printf "[\e[1;33mWarning\e[0m] These modules have uncommitted changes and were not updated:\n"
  for module in ${notupdated[@]}
  do
    :
    printf "  [\e[1;31mx\e[0m] $module\n"
  done
fi

printf "\e[1;32mAll done!\e[0m\n"
